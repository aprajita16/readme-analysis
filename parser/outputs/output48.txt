=== Title ===
Password Authentication with <b>Mongoose</b> Part 1
=== URL ===
http://blog.mongodb.org/post/32866457221/password-authentication-with-mongoose-part-1

to subsequently use the encrypted password for login verification
subsequently use the encrypted password for login verification
recommended Coda Hale 's excellent article onhow to safely store a password URL
to safely store a password URL
're not familiar with bcrypt
safely store a password URL
avoid blocking the event loop -LRB- bcrypt also exposes a synchronous API -RRB- Step 1 : The User Model Even if you are n't too familiar with Mongoose schemas
to avoid blocking the event loop -LRB- bcrypt also exposes a synchronous API -RRB- Step 1 : The User Model Even if you are n't too familiar with Mongoose schemas
performed asynchronously to avoid blocking the event loop -LRB- bcrypt also exposes a synchronous API -RRB- Step 1 : The User Model Even if you are n't too familiar with Mongoose schemas
be performed asynchronously to avoid blocking the event loop -LRB- bcrypt also exposes a synchronous API -RRB- Step 1 : The User Model Even if you are n't too familiar with Mongoose schemas
are n't too familiar with Mongoose schemas
should be performed asynchronously to avoid blocking the event loop -LRB- bcrypt also exposes a synchronous API -RRB- Step 1 : The User Model Even if you are n't too familiar with Mongoose schemas
start things off , let 's create our bare bones representation of a user
let 's create our bare bones representation of a user
To start things off , let 's create our bare bones representation of a user
create our bare bones representation of a user
bcrypt in particular uses
saved to the database
hash the password before it 's saved to the database
's saved to the database
is some Mongoose middleware that will automatically hash the password before it 's saved to the database
will automatically hash the password before it 's saved to the database
looks like : The above code will accomplish our goal of always hashing the password when a document is saved to the database
will accomplish our goal of always hashing the password when a document is saved to the database
saved to the database
hashing the password when a document is saved to the database
is saved to the database
accomplish our goal of always hashing the password when a document is saved to the database
are a couple things to be aware of though : Because passwords are not hashed until the document is saved , be careful if you 're interacting with documents that were not retrieved from the database , as any passwords will still be in cleartext
be aware of though : Because passwords are not hashed until the document is saved
hashed until the document is saved
be aware of though : Because passwords are not hashed until the document is saved , be careful if you 're interacting with documents that were not retrieved from the database , as any passwords will still be in cleartext
to be aware of though : Because passwords are not hashed until the document is saved , be careful if you 're interacting with documents that were not retrieved from the database , as any passwords will still be in cleartext
are not hashed until the document is saved
use a if you want to update user passwords
to update user passwords
is not invoked on operations , so you must use a if you want to update user passwords
update user passwords
want to update user passwords
must use a if you want to update user passwords
invoked on operations , so you must use a if you want to update user passwords
'll discuss preventing brute-force attacks by enforcing a maximum number of failed login URL for reading
enforcing a maximum number of failed login URL for reading
discuss preventing brute-force attacks by enforcing a maximum number of failed login URL for reading
preventing brute-force attacks by enforcing a maximum number of failed login URL for reading
Tasks before filtering: 180Tasks after filtering: 45