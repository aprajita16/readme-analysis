=== Title ===
Build a <b>RESTful API</b> using <b>Node</b> and MongoDB | Code for geek
=== URL ===
https://codeforgeek.com/2015/08/restful-api-node-mongodb/

offer you stable version to download
need to specify the location where MongoDB will store your databases
will store your databases
store your databases
to specify the location where MongoDB will store your databases
specify the location where MongoDB will store your databases
like a table in database that will store your information
use database_name Inside database , you create collections which actually like a table in database that will store your information
create collections which actually like a table in database that will store your information
provide native driver for URL called `` mongodb '' which you can use to connect to MongoDB
MongoDB provide native driver for URL called `` mongodb '' which you can use to connect to MongoDB
save mongoose Here is my URL
npm install -- save mongoose Here is my URL
install -- save mongoose Here is my URL
file run following command to install the modules
to install the modules
create your package file
install the modules
To set up our project Server
set up our project Server
test our first route using PostMan -LRB- REST simulator chrome extension -RRB-
Let 's test our first route using PostMan -LRB- REST simulator chrome extension -RRB-
allows you to create models -LRB- OR Schema OR tables -RRB- in your MongoDB database
to create models -LRB- OR Schema OR tables -RRB- in your MongoDB database
create models -LRB- OR Schema OR tables -RRB- in your MongoDB database
connect mongoDB database to our URL here
To connect mongoDB database to our URL here
uses JSON structure to create schema in model
to create schema in model
create schema in model
/ / create instance of Schema var mongoSchema = URL ; / / create schema var userSchema = -LCB- `` userEmail '' : String , `` userPassword '' : String -RCB-
create schema var
require -LRB- ''
covered complete tutorial on RESTful API 's URL using MySQL
have covered complete tutorial on RESTful API 's URL using MySQL
using Electron URL So our Resource will be `` users ''
will be `` users ''
be `` users ''
Add strict validation when you use this in Production
add new user in MongoDB , open up POSTMAN , use POST as type
To add new user in MongoDB , open up POSTMAN , use POST as type
use POST as type
To check this route , hit our first API to get all users
hit our first API to get all users
to get all users
check this route , hit our first API to get all users
get all users
does then update the record URL -LRB- URL , function -LRB- err , data -RRB- -LCB- if -LRB- err -RRB- -LCB- response = -LCB- `` error '' : true , `` message '' : `` Error fetching data '' -RCB- ; -RCB- else -LCB- /
got data from Mongo
update the record URL -LRB- URL , function -LRB- err , data -RRB- -LCB- if -LRB- err -RRB- -LCB- response = -LCB- `` error '' : true , `` message '' : `` Error fetching data '' -RCB- ; -RCB- else -LCB- /
exists not / / if it does then update the record URL -LRB- URL , function -LRB- err , data -RRB- -LCB- if -LRB- err -RRB- -LCB- response = -LCB- `` error '' : true , `` message '' : `` Error fetching data '' -RCB- ; -RCB- else -LCB- / / we got data from Mongo
/ / if it does then update the record URL -LRB- URL , function -LRB- err , data -RRB- -LCB- if -LRB- err -RRB- -LCB- response = -LCB- `` error '' : true , `` message '' : `` Error fetching data '' -RCB- ; -RCB- else -LCB- / / we got data from Mongo
want to update in JSON format
to update in JSON format
pass data which you want to update in JSON format
updating data ''
first get the ID of any user
first get the ID of any user
update in JSON format
find the data URL -LRB- URL , function -LRB- err , data -RRB- -LCB- if -LRB- err -RRB- -LCB- response = -LCB- `` error '' : true , `` message '' : `` Error fetching data '' -RCB- ; -RCB- else -LCB- /
= -LCB- `` error '' : true , `` message '' : `` Error deleting data '' -RCB- ; -RCB- else -LCB- response = -LCB- `` error '' : true , `` message '' : `` Data associated with '' + URL + `` is deleted '' -RCB- ; -RCB- URL -LRB- response -RRB- ; -RCB-
= -LCB- `` error '' : true , `` message '' : `` Data associated with '' + URL + `` is deleted '' -RCB-
deleting data ''
have a large amount of data say 1000TB then SQL is quite slow at that time
is great in performing READ operation , so if you have a large amount of data say 1000TB then SQL is quite slow at that time
TAGS * Express URL * MongoDB URL * URL URL * Tutorial URL SHARE Facebook URL Twitter URL URLURL URLURLURL * * tweet URL Previous articleHow nodejs event loop works URLNext article Develop command line application using NodeJS URL URLShahid -LRB- UnixRoot -RRB- Shaikh URLURL URLHey there , This is Shahid , an Engineer
setting up mongoDB in your example code
got some errors
Should not happen as per code ! Which Node version are you using ?
happen as per code ! Which Node version are you using ?
've the same issue as `` wffger '' : my Node version is 4
am < > I 've the same issue as `` wffger '' : my Node version is 4
are using promises
using promises
user * model : userMail
is a * user
appending model name in tables i read in MSDN that is it standard in database design to use table name as prefix in columns
is it standard in database design to use table name as prefix in columns
it standard in database design to use table name as prefix in columns
read in MSDN that is it standard in database design to use table name as prefix in columns
Do n't use SHA-1 for password hashing
use SHA-1 for password hashing
ca n't update there either if I 'm using the _ id as the selection criteria
console I ca n't update there either if I 'm using the _ id as the selection criteria
find in the mongo console I ca n't update there either if I 'm using the _ id as the selection criteria
'm using the _ id as the selection criteria
update there either if I 'm using the _ id as the selection criteria
using the _ id as the selection criteria
Tasks before filtering: 667Tasks after filtering: 88